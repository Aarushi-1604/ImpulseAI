import React from 'react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '../ui/dialog';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { Separator } from '../ui/separator';
import { CheckCircle, Download, Share, Calendar, CreditCard, Tag, Heart } from 'lucide-react';

interface Transaction {
  id: string;
  date: Date;
  amount: number;
  type: 'credit' | 'debit';
  category: string;
  description: string;
  mood?: string;
  isImpulse?: boolean;
}

interface TransactionReceiptProps {
  transaction: Transaction | null;
  isOpen: boolean;
  onClose: () => void;
}

export function TransactionReceipt({ transaction, isOpen, onClose }: TransactionReceiptProps) {
  if (!transaction) return null;

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const handleDownload = () => {
    const receiptData = `
SPENDWISE - TRANSACTION RECEIPT
==============================

Transaction ID: ${transaction.id}
Date: ${formatDate(transaction.date)}
Type: ${transaction.type.toUpperCase()}
Amount: ₹${transaction.amount.toLocaleString()}
Category: ${transaction.category}
Description: ${transaction.description}
${transaction.mood ? `Mood: ${transaction.mood}` : ''}
${transaction.isImpulse ? 'Impulse Purchase: Yes' : ''}

Generated by SpendWise
Your AI-powered financial companion
    `.trim();

    const blob = new Blob([receiptData], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `spendwise-receipt-${transaction.id}.txt`;
    link.click();
    URL.revokeObjectURL(url);
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-md glass border-accent-green/20">
        <DialogHeader className="text-center space-y-4">
          <div className="mx-auto w-16 h-16 bg-gradient-green rounded-full flex items-center justify-center">
            <CheckCircle className="h-8 w-8 text-black" />
          </div>
          <DialogTitle className="text-xl">Transaction Recorded</DialogTitle>
          <DialogDescription>
            Your transaction has been successfully added to SpendWise
          </DialogDescription>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* Receipt Details */}
          <div className="bg-secondary/30 rounded-lg p-4 space-y-4">
            <div className="text-center">
              <div className={`text-3xl font-bold ${
                transaction.type === 'credit' ? 'text-accent-green' : 'text-foreground'
              }`}>
                {transaction.type === 'credit' ? '+' : '-'}₹{transaction.amount.toLocaleString()}
              </div>
              <p className="text-sm text-muted-foreground mt-1">
                {transaction.type === 'credit' ? 'Income' : 'Expense'}
              </p>
            </div>
            
            <Separator />
            
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm">Date</span>
                </div>
                <span className="text-sm font-medium">{formatDate(transaction.date)}</span>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Tag className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm">Category</span>
                </div>
                <Badge variant="outline">{transaction.category}</Badge>
              </div>
              
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <CreditCard className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm">Description</span>
                </div>
                <span className="text-sm font-medium text-right max-w-48 truncate">
                  {transaction.description}
                </span>
              </div>
              
              {transaction.mood && (
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <Heart className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">Mood</span>
                  </div>
                  <Badge variant="outline" className="capitalize">{transaction.mood}</Badge>
                </div>
              )}
              
              {transaction.isImpulse && transaction.type === 'debit' && (
                <div className="flex items-center justify-center">
                  <Badge variant="destructive" className="text-xs">
                    ⚡ Impulse Purchase
                  </Badge>
                </div>
              )}
            </div>
          </div>
          
          {/* Transaction ID */}
          <div className="text-center">
            <p className="text-xs text-muted-foreground">
              Transaction ID: {transaction.id}
            </p>
          </div>
          
          {/* Action Buttons */}
          <div className="flex gap-3">
            <Button variant="outline" onClick={handleDownload} className="flex-1">
              <Download className="h-4 w-4 mr-2" />
              Download
            </Button>
            <Button onClick={onClose} className="flex-1 gradient-green text-black">
              Done
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}